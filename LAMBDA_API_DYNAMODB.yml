AWSTemplateFormatVersion: 2010-09-09
Description: Template to create backend infra for biometrics
Parameters:    
  firstdynamodbtable:
    Description: Please enter the dynamo db table for storing user login details
    Type: String
    Default: dynamodb1
       
  LAMBDAIAMRole:
    Description: Please enter the role name used for creating the LAMBDA IAM ROle.
    Type: String
    Default: dynamodbrule1
    
Resources:
  popashotuserdatadb:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref firstdynamodbtable
      AttributeDefinitions:
        - AttributeName: uname
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: uname
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes: 
        - IndexName: "email-index"
          KeySchema: 
            - AttributeName: "email"
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
            
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Lambda-Role-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'cloudwatch:*'
                  - 'logs:*'
                  - 'sns:*'
                  - 'iam:GetPolicy'
                  - 'iam:GetPolicyVersion'
                  - 'iam:GetRole'
                  - 'dynamodb:*'
                  - 'lambda:*'
                  - 'apigateway:*'
                  - '*'
                Resource: '*'
      RoleName: !Ref LAMBDAIAMRole

  pasuserdetails:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: sourcebk1
        S3Key: pas_userdetails.zip
      FunctionName: get_userdetails
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          APP_REGION: !Ref 'AWS::Region'
      MemorySize: 1024
      Role: !GetAtt 
        - IAMRole
        - Arn
      Runtime: python3.7
      Tags:
        - Key: CreatedBy
          Value: Deloitte
      Timeout: '900'
      Description: User details
  popashotregister:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: sourcebk1
        S3Key: pop-a-shot-register.zip
      FunctionName: user-register
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          APP_REGION: !Ref 'AWS::Region'
      MemorySize: 1024
      Role: !GetAtt 
        - IAMRole
        - Arn
      Runtime: python3.7
      Tags:
        - Key: CreatedBy
          Value: Deloitte
      Timeout: '900'
      Description: user-register
  popashot:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: user-reg-API
      Description: API used for invoking Lambda
      EndpointConfiguration:
        Types:
          - REGIONAL
      FailOnWarnings: true 
  RestAPILambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - pasuserdetails
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref popashot
          - /*
  RestAPILambdaPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - popashotregister
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref popashot
          - /*
  APIResource1:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref popashot
      ParentId: !GetAtt 
        - popashot
        - RootResourceId
      PathPart: lookup_kiosk
  APIResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref popashot
      ParentId: !GetAtt 
        - popashot
        - RootResourceId
      PathPart: register

  RestAPIMethod11:
    DependsOn:
      - RestAPILambdaPermission1
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RestApiId: !Ref popashot
      ResourceId: !Ref APIResource1
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - pasuserdetails
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: '200'
      OperationName: /
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: 'true'
          StatusCode: 200
  RestAPIMethod12:
    DependsOn:
      - RestAPILambdaPermission1
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !Ref popashot
      ResourceId: !Ref APIResource1
      Integration:
        ConnectionType: INTERNET
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ' '
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
        TimeoutInMillis: 29000
      OperationName: mock
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: 'true'
            method.response.header.Access-Control-Allow-Methods: 'true'
            method.response.header.Access-Control-Allow-Origin: 'true'
          StatusCode: 200
  RestAPIMethod21:
    DependsOn:
      - RestAPILambdaPermission2
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      RestApiId: !Ref popashot
      ResourceId: !Ref APIResource2
      Integration:
        ConnectionType: INTERNET
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ' '
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
        TimeoutInMillis: 29000
      OperationName: mock
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: 'true'
            method.response.header.Access-Control-Allow-Methods: 'true'
            method.response.header.Access-Control-Allow-Origin: 'true'
          StatusCode: 200
  RestAPIMethod22:
    DependsOn:
      - RestAPILambdaPermission2
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref popashot
      ResourceId: !Ref APIResource2
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - popashotregister
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: '200'
      OperationName: /
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
 
  RestAPIDeployment1:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - RestAPIMethod11
      - RestAPIMethod12
    Properties:
      RestApiId: !Ref popashot
      StageName: v1
  RestAPIDeployment2:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - RestAPIMethod21
      - RestAPIMethod22
    Properties:
      RestApiId: !Ref popashot
      StageName: v1
 
  RestAPIModel1:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      RestApiId: !Ref popashot
      Schema: {}
Outputs:
  Dynamo1:
    Value: !Ref firstdynamodbtable
    Description: RESTAPI Created for POP-A-SHOT
     
  RestAPICreation:
    Value: !Ref popashot
    Description: RESTAPI Created for POP-A-SHOT
  LambdaIAMRole:
    Value: !GetAtt 
      - IAMRole
      - Arn
    Description: Created the IAM Role for LAMBDA execution
  Lambda1:
    Value: !GetAtt 
      - pasuserdetails
      - Arn
    Description: Created the LAMBDA for pasuserdetails
  Lambda2:
    Value: !GetAtt 
      - popashotregister
      - Arn
    Description: Created the LAMBDA for popashotregister
  MyOutput:
    Value: !Join ['', [ 'A-string', !Ref 'AWS::StackName' ]]